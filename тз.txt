import json
import logging
from pathlib import Path
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from models.character import Character
from keyboards.character_kb import (
    generate_race_selection_keyboard,
    generate_class_selection_keyboard,
    confirm_selection_keyboard,
    final_confirmation_keyboard
)
from utils.database import save_character, get_character_data
from utils.stat_calculator import calculate_total_stats, apply_race_class_modifiers
from utils.stat_names import STAT_NAMES

logger = logging.getLogger(__name__)
router = Router()

class CharacterCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_race_selection = State()
    waiting_for_race_confirmation = State()
    waiting_for_class_selection = State()
    waiting_for_class_confirmation = State()
    waiting_for_photo = State()
    confirm_creation = State()

# Load races and classes data with error handling
def load_json_data(filename: str) -> Dict[str, Any]:
    """Load JSON data with error handling."""
    try:
        # Get the project root directory (one level up from handlers/)
        project_root = Path(__file__).parent.parent
        file_path = project_root / 'data' / filename
        
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"Error loading {filename}: {e}")
        return {}

RACES_DATA = load_json_data('races.json')
CLASSES_DATA = load_json_data('classes.json')

# Constants
MIN_NAME_LENGTH = 2
MAX_NAME_LENGTH = 20
MIN_AGE = 10
MAX_AGE = 100
BASE_STATS = {
    "hp": 100,
    "attack": 10,
    "defense": 10,
    "magic": 10,
    "agility": 10,
    "mana": 10
}

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """Safely edit message with error handling."""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        logger.warning(f"Failed to edit message: {e}")
        # If editing fails, send a new message
        await callback.message.answer(text, reply_markup=reply_markup)

@router.callback_query(F.data == "start_create_character")
async def request_character_name(callback: CallbackQuery, state: FSMContext):
    """Start character creation by requesting name."""
    await safe_edit_message(
        callback,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—É—Ç–Ω–∏–∫!\n\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?\nüìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∏–º—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await state.set_state(CharacterCreation.waiting_for_name)
    await callback.answer()

@router.message(CharacterCreation.waiting_for_name)
async def process_character_name(message: Message, state: FSMContext):
    """Process character name input."""
    if not message.text:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º.")
        return
    
    name = message.text.strip()
    if not (MIN_NAME_LENGTH <= len(name) <= MAX_NAME_LENGTH):
        await message.answer(f"üö´ –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_NAME_LENGTH} –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(name=name)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç?\nüìÖ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE}.")
    await state.set_state(CharacterCreation.waiting_for_age)

@router.message(CharacterCreation.waiting_for_age)
async def process_character_age(message: Message, state: FSMContext):
    """Process character age input."""
    if not message.text:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ.")
        return
    
    try:
        age = int(message.text.strip())
        if not (MIN_AGE <= age <= MAX_AGE):
            await message.answer(f"üö´ –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        
        await state.update_data(age=age)
        
        if not RACES_DATA:
            await message.answer("üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        await message.answer(
            "üß¨ –í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n–ö–∞–∂–¥–∞—è —Ä–∞—Å–∞ –¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!",
            reply_markup=generate_race_selection_keyboard(RACES_DATA)
        )
        await state.set_state(CharacterCreation.waiting_for_race_selection)
    except ValueError:
        await message.answer("üö´ –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("races_page_"), CharacterCreation.waiting_for_race_selection)
async def paginate_races(callback: CallbackQuery, state: FSMContext):
    """Handle race pagination."""
    try:
        page = int(callback.data.split('_')[2])
        await callback.message.edit_reply_markup(
            reply_markup=generate_race_selection_keyboard(RACES_DATA, current_page=page)
        )
    except (ValueError, IndexError, TelegramBadRequest) as e:
        logger.error(f"Error in race pagination: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("select_race_"), CharacterCreation.waiting_for_race_selection)
async def show_race_details(callback: CallbackQuery, state: FSMContext):
    """Show race details for confirmation."""
    try:
        race_id = callback.data.split('_')[2]
        race_info = RACES_DATA.get(race_id)
        
        if not race_info:
            await callback.answer("üö´ –†–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        modifiers_text = "\n".join([
            f"{'+' if mod > 0 else ''}{mod}% –∫ {STAT_NAMES.get(stat, stat)}" 
            for stat, mod in race_info["modifiers"].items()
        ])
        
        await safe_edit_message(
            callback,
            f"üß¨ –†–∞—Å–∞: {race_info['name']}\n\nüéØ –ë–æ–Ω—É—Å—ã:\n{modifiers_text}\n\nüìñ {race_info['description']}",
            reply_markup=confirm_selection_keyboard("—Ä–∞—Å—É", race_id, "—Ä–∞—Å")
        )
        await state.update_data(selected_race_id=race_id)
        await state.set_state(CharacterCreation.waiting_for_race_confirmation)
    except (IndexError, KeyError) as e:
        logger.error(f"Error showing race details: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—ã.", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "back_to_races_list", CharacterCreation.waiting_for_race_confirmation)
async def back_to_races_list(callback: CallbackQuery, state: FSMContext):
    """Return to races list."""
    await safe_edit_message(
        callback,
        "üß¨ –í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n–ö–∞–∂–¥–∞—è —Ä–∞—Å–∞ –¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!",
        reply_markup=generate_race_selection_keyboard(RACES_DATA)
    )
    await state.set_state(CharacterCreation.waiting_for_race_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_race_"), CharacterCreation.waiting_for_race_confirmation)
async def confirm_race(callback: CallbackQuery, state: FSMContext):
    """Confirm race selection and proceed to class selection."""
    try:
        race_id = callback.data.split('_')[2]
        
        if race_id not in RACES_DATA:
            await callback.answer("üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞—Å–∞.", show_alert=True)
            return
        
        if not CLASSES_DATA:
            await callback.answer("üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.", show_alert=True)
            return
        
        await state.update_data(race=race_id)
        await safe_edit_message(
            callback,
            "üé≠ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å.\n\n–ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
            reply_markup=generate_class_selection_keyboard(CLASSES_DATA)
        )
        await state.set_state(CharacterCreation.waiting_for_class_selection)
    except (IndexError, KeyError) as e:
        logger.error(f"Error confirming race: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—ã.", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("classes_page_"), CharacterCreation.waiting_for_class_selection)
async def paginate_classes(callback: CallbackQuery, state: FSMContext):
    """Handle class pagination."""
    try:
        page = int(callback.data.split('_')[2])
        await callback.message.edit_reply_markup(
            reply_markup=generate_class_selection_keyboard(CLASSES_DATA, current_page=page)
        )
    except (ValueError, IndexError, TelegramBadRequest) as e:
        logger.error(f"Error in class pagination: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("select_class_"), CharacterCreation.waiting_for_class_selection)
async def show_class_details(callback: CallbackQuery, state: FSMContext):
    """Show class details for confirmation."""
    try:
        class_id = callback.data.split('_')[2]
        class_info = CLASSES_DATA.get(class_id)
        
        if not class_info:
            await callback.answer("üö´ –ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        modifiers_text = "\n".join([
            f"{'+' if mod > 0 else ''}{mod}% –∫ {STAT_NAMES.get(stat, stat)}" 
            for stat, mod in class_info["modifiers"].items()
        ])
        
        await safe_edit_message(
            callback,
            f"üé≠ –ö–ª–∞—Å—Å: {class_info['name']}\n\nüéØ –ë–æ–Ω—É—Å—ã:\n{modifiers_text}\n\nüìñ {class_info['description']}",
            reply_markup=confirm_selection_keyboard("–∫–ª–∞—Å—Å", class_id, "–∫–ª–∞—Å—Å–æ–≤")
        )
        await state.update_data(selected_class_id=class_id)
        await state.set_state(CharacterCreation.waiting_for_class_confirmation)
    except (IndexError, KeyError) as e:
        logger.error(f"Error showing class details: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞.", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "back_to_classes_list", CharacterCreation.waiting_for_class_confirmation)
async def back_to_classes_list(callback: CallbackQuery, state: FSMContext):
    """Return to classes list."""
    await safe_edit_message(
        callback,
        "üé≠ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å.\n\n–ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –∏–≥—Ä—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
        reply_markup=generate_class_selection_keyboard(CLASSES_DATA)
    )
    await state.set_state(CharacterCreation.waiting_for_class_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_class_"), CharacterCreation.waiting_for_class_confirmation)
async def confirm_class(callback: CallbackQuery, state: FSMContext):
    """Confirm class selection and proceed to photo upload."""
    try:
        class_id = callback.data.split('_')[2]
        
        if class_id not in CLASSES_DATA:
            await callback.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å.", show_alert=True)
            return
        
        await state.update_data(character_class=class_id)
        await safe_edit_message(
            callback,
            "üì∏ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å—É–Ω–æ–∫, –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–∑."
        )
        await state.set_state(CharacterCreation.waiting_for_photo)
    except (IndexError, KeyError) as e:
        logger.error(f"Error confirming class: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞.", show_alert=True)
    
    await callback.answer()

@router.message(CharacterCreation.waiting_for_photo, F.photo)
async def process_character_photo(message: Message, state: FSMContext):
    """Process character photo and show final confirmation."""
    try:
        photo_id = message.photo[-1].file_id
        await state.update_data(photo_id=photo_id)
        
        user_data = await state.get_data()
        name = user_data.get('name')
        age = user_data.get('age')
        race_id = user_data.get('race')
        class_id = user_data.get('character_class')
        
        # Validate all required data is present
        if not all([name, age, race_id, class_id]):
            await message.answer("üö´ –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        race_info = RACES_DATA.get(race_id)
        class_info = CLASSES_DATA.get(class_id)
        
        if not race_info or not class_info:
            await message.answer("üö´ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—ã –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return
        
        # Calculate final stats
        final_stats = apply_race_class_modifiers(
            BASE_STATS,
            race_info["modifiers"],
            class_info["modifiers"]
        )
        
        # Store calculated stats
        await state.update_data(final_stats=final_stats)
        
        character_summary = (
            f"üìú –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"üß¨ –†–∞—Å–∞: {race_info['name']}\n"
            f"üé≠ –ö–ª–∞—Å—Å: {class_info['name']}\n"
            f"üñº –§–æ—Ç–æ: ‚úÖ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n\n"
            f"üìä –°—Ç–∞—Ç—ã:\n"
        )
        
        for stat, value in final_stats.items():
            stat_name = STAT_NAMES.get(stat, stat)
            character_summary += f"  {stat_name}: {value}\n"
        
        await message.answer_photo(
            photo=photo_id,
            caption=character_summary,
            reply_markup=final_confirmation_keyboard()
        )
        await state.set_state(CharacterCreation.confirm_creation)
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(CharacterCreation.waiting_for_photo, ~F.photo)
async def process_character_photo_invalid(message: Message, state: FSMContext):
    """Handle non-photo messages in photo waiting state."""
    await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@router.callback_query(F.data == "confirm_character_creation", CharacterCreation.confirm_creation)
async def confirm_character_creation(callback: CallbackQuery, state: FSMContext):
    """Confirm character creation and save to database."""
    try:
        user_data = await state.get_data()
        user_id = callback.from_user.id
        
        # Validate required data
        required_fields = ['name', 'age', 'race', 'character_class']
        missing_fields = [field for field in required_fields if field not in user_data]
        
        if missing_fields:
            await callback.answer(f"üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}", show_alert=True)
            return
        
        # Create character with validated data
        character = Character(
            user_id=user_id,
            name=user_data['name'],
            age=user_data['age'],
            race=user_data['race'],
            character_class=user_data['character_class'],
            photo_id=user_data.get('photo_id'),
            stats=user_data.get('final_stats')
        )
        
        # Save character to database
        await save_character(character)
        
        await callback.message.answer(
            f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ì–æ—Ç–æ–≤—å—Å—è –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º, {character.name}!\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /menu"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error creating character: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "cancel_character_creation", CharacterCreation.confirm_creation)
async def cancel_character_creation(callback: CallbackQuery, state: FSMContext):
    """Cancel character creation."""
    await state.clear()
    await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥—è /menu.")
    await callback.answer()

# Error handler for invalid states
@router.callback_query(F.data.startswith(("select_race_", "select_class_", "confirm_race_", "confirm_class_")))
async def handle_invalid_state_callback(callback: CallbackQuery, state: FSMContext):
    """Handle callbacks received in invalid states."""
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("üö´ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    else:
        await callback.answer("üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞.", show_alert=True)